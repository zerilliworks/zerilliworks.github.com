<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zerillian Engineering]]></title>
  <link href="http://blog.zerilliworks.net/atom.xml" rel="self"/>
  <link href="http://blog.zerilliworks.net/"/>
  <updated>2013-05-30T05:39:36-04:00</updated>
  <id>http://blog.zerilliworks.net/</id>
  <author>
    <name><![CDATA[Armand Zerilli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Four Triangles]]></title>
    <link href="http://blog.zerilliworks.net/blog/2013/05/29/four-triangles/"/>
    <updated>2013-05-29T01:29:00-04:00</updated>
    <id>http://blog.zerilliworks.net/blog/2013/05/29/four-triangles</id>
    <content type="html"><![CDATA[<p>When I first spiffed up a logo, it was wicked nasty.</p>

<p><img src="http://blog.zerilliworks.net/images/articles/four-triangles/old_logo.png">
<em>LOOK AT THAT SON OF A BITCH.</em></p>

<p>It served me well for a couple of years when I did work in high school and before my startup experience. But at the beginning of 2012 it was in need of a refresh. I tried to remove as much extra detail as possible. I tried a few logos before thinking about the absolute fewest things I would need. The polygon with the fewest sides, the triangle, and the fewest triangles necessary. Which turned out to be four.</p>

<p>People sometimes tell me that they don&#8217;t see a Z and a W right away. I&#8217;m okay with that. I like that it&#8217;s a little abstract.</p>

<p>Threw this fiddle together to show the four simple shapes and give them some attitude. This drifting logo sat on the homepage of zerilliworks.net while the blog was under construction.</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/adNUq/embedded/result,js,html,css/light/"></iframe>


<p>You can mouse over or tap on them to get them back in line. Cheeky bastards. You can also see the original under construction page <a href="http://blog.zerilliworks.net/extras/under_construction.html">here.</a> The drifting triangles take a while to manifest, they were more of an easter egg.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All Work and No Play Makes Jack Become an Architect and Build a Bridge to Jump From]]></title>
    <link href="http://blog.zerilliworks.net/blog/2013/04/26/all-work-and-no-play-makes-jack-become-an-architect-and-build-a-bridge-to-jump-from/"/>
    <updated>2013-04-26T20:44:00-04:00</updated>
    <id>http://blog.zerilliworks.net/blog/2013/04/26/all-work-and-no-play-makes-jack-become-an-architect-and-build-a-bridge-to-jump-from</id>
    <content type="html"><![CDATA[<p>Working in my past job at a film distribution startup was at times a nightmare. I was the only programmer doing the work of four, which I hear is not uncommon among the tech startup scene. Most of it can be summed up in saying it was too much work for too little reward, and it damn near killed me.</p>

<!-- more -->


<p>I was the only one I had to answer to in implementing a feature, and I did it quickly. I dodged left and right to meet the expectations of my partners, building out a feature and abandoning it as a nonessential or too convoluted. It could be fun, since I got to experiment with a lot of things. I did code monkey work in the past, so a promotion to an architect-like position felt empowering. OH HOW NAÏVE I WAS.</p>

<p>Ultimately, I worked all the time without seeing regular gains in functionality and overall enjoyment using the app. I had burned through development with workaholic kerosene and I built the shoddy, ill-conceived bridge from which I would make my Javert-esque plunge into the dark, churning waters below.</p>

<p>This lesson is simple. If you’re feeling stymied, it’s probably because you’ve worked too hard for too little. Essentially, <em>it&#8217;s your own absent-minded blundering fault.</em> <strong>BUT DON&#8217;T FEEL SHITTY ABOUT IT.</strong> Chances are, you were doing what felt right at the time. Sometimes throwing more hours at a problem sounds like the proper solution but is absolutely the wrong thing to do. Sometimes you’ve wandered so far from your ideals that working smarter and not harder still isn’t enough to fix your bridge. It becomes more and more difficult if you&#8217;re attached to your ideas and stubborn in protecting them. These are great traits to have, but they can sadly become misdirected. The deluded image of a workplace hero is one who is willing to sacrifice himself for the project.</p>

<p>The thing is, though, that you are part of what makes the project alive. Destroying your health will cause far more harm than good. I should know. I wasn&#8217;t kidding when I said it damn near killed me. I&#8217;ve got juvenile-onset diabetes, and the stress led to remiss intermittent care.</p>

<p>This is mostly why I’m teaching myself about Ruby on Rails. It’s instant gratification. They’re serious when they say Rails can do in days what takes others weeks. The work you put into it is satisfying. You’re the architect of your app. You shouldn’t be mixing the concrete and bending rebar. Use your tools to empower your ideas whenever possible. Working with PHP was unbearable more often than not. I was laying bricks when I should have been sketching out the new wing of the museum.</p>

<p>My misdirected brute-forcing of problems blindly pushed the project forward. I was just building a bridge so we could cross the river. This was all the faith I had in the project, just that it could be done. When that illusion shattered&#8230; It was nothing short of odious.  Now, I see myself as part of my projects, and them as a part of me. My health reflects theirs and vice-versa. I think you too will find your projects say as much about you as you do about them.</p>

<p>I didn’t always plan on flinging myself off the unfinished end of my bridge, but that outcome was, in retrospect, inevitable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connect Yourself to the World]]></title>
    <link href="http://blog.zerilliworks.net/blog/2013/04/21/connect-yourself-to-the-world/"/>
    <updated>2013-04-21T00:04:00-04:00</updated>
    <id>http://blog.zerilliworks.net/blog/2013/04/21/connect-yourself-to-the-world</id>
    <content type="html"><![CDATA[<p>A few days ago, I was lucky enough to attend a gathering of some local web developers and software artisans. I&#8217;ve <a href="http://blog.zerilliworks.net/blog/2013/03/28/im-here-for-the-evolution/">previously documented</a> my loneliness and the degree to which it afflicted me, so this was a welcome event. Just a few hours with intelligent like-minded people really kicked my ass. It was a time when I could tell I was the dullest tool in the shed, but that was fine. It&#8217;s not that I wasn&#8217;t sharp. It&#8217;s that I was in a shed with lawnmowers made of lightsaber.</p>

<!-- more -->




<blockquote class="twitter-tweet"><p>Really excellent day today. Learned about creeping on people with data and the disgusting guts of browsers from some really clever gents.</p>&mdash; Armand Zerilli (@zerilliworks) <a href="https://twitter.com/zerilliworks/status/324337394360930304">April 17, 2013</a></blockquote>


<script async src="http://blog.zerilliworks.net//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>I was a bit nervous going into it, as I often am with these kinds of events, but I got over that surprisingly quickly just by shaking hands and telling people my name. I can&#8217;t emphasize enough how easily that calmed me. I remember standing outside on the street looking at the door and wondering if I&#8217;d even be able to keep up with what happened in there. The fear was completely unfounded, and mostly dissolved by shaking hands and exchanging names.</p>

<p>I got some water, took a seat, and felt immediately that I was the youngest person there by at least five years. Mostly just an observation. I wasn&#8217;t bothered by being new, and it didn&#8217;t seem anyone else was either. I had been worried I would be bothered, but&#8230; There I was, acquainting myself with the enthusiastic faces of the Ithaca web people.</p>

<p>Presentations were given, jokes were exchanged, and cats were turned into bacon. Marvelous. I got to really feel what proficient and well-adjusted programmers do, and a little about how they think. I fear that I asked some silly-sounding questions, but they were regardless met with thoughtful consideration and straight answers.</p>

<p>In my startup experience, meetups were often in the mixed company of business-types and technology-types, and everybody was putting on a show. In those <em>&#8220;little businesses that could,&#8221;</em> every second of every conversation was a pitch in some way or another. I was glad to see no trace of that here.</p>

<p>Before I left, I waited outside with one of the attendees with whom I had an informative exchange regarding my recent efforts and employment opportunities I didn&#8217;t even know existed. Seriously, there are more than a handful of web companies in Ithaca. My eyebrows peaked for sure, in a good way. The way that says, &#8220;By Jove! Not so forlorn is my situation after all!&#8221;</p>

<p>I left feeling refreshed and somewhat humbled. I picked up more in that couple of hours than I probably had taught myself in the last month. Having people who can speak concisely and from experience is an invaluable learning tool.</p>

<p>So if you&#8217;re a bit of a hermit, please do what I did. Don&#8217;t think too big, don&#8217;t worry about acting silly, and don&#8217;t worry about judgement. Connecting yourself to the world isn&#8217;t that difficult, and it&#8217;s certainly not the kind of competitive overanalyzing that many social cynics say it is. Just do what I did.</p>

<p>Shake hands, say your name, and listen.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Excess Verbosity]]></title>
    <link href="http://blog.zerilliworks.net/blog/2013/04/08/excess-verbosity/"/>
    <updated>2013-04-08T15:17:00-04:00</updated>
    <id>http://blog.zerilliworks.net/blog/2013/04/08/excess-verbosity</id>
    <content type="html"><![CDATA[<p>I have a tendency toward verbosity. I&#8217;m a really wordy person. TOO WORDY, IN FACT.</p>

<p>I think the reason I do it stems from a fear that my ideas won&#8217;t get through to people. I used to have to explain things to non-technical people, and sometimes that made my brain go around in circles attempting to come up with the right words. I got rather accustomed to stringing words together that had to adjust previous words with more detail, supposedly assuring that I wasn&#8217;t misunderstood. By the way, there&#8217;s one word for that paragraph: <em>Pleonasm.</em></p>

<p>Mostly it just confused people, so something had to give.</p>

<!-- more -->


<p>I wrote some emails recently, and boy were they motormouthed, perhaps <em>incongruously</em> so. I mean, I&#8217;ve got a little OS X launcher utility that can do thesaurus lookups. It&#8217;s been getting more use lately.</p>

<p>I also have friends that like to edit their writing only as they write it. Those works tend to be quite <em>tautological.</em> The fault is a lack of a unifying <em>cynosure</em>. My emails tend to be like that, unfortunately. Conversational tones give a <em>congenial</em> feel to these communications, but I think I&#8217;ve overdone it.</p>

<p>See? A little refined vocabulary cuts away superfluity. I&#8217;ve learned to work that thesaurus and boil down sentences to core meaning, finding out if I&#8217;ve repeated things too often. It&#8217;s a rule now.</p>

<p>For others with <em>circuitous</em> writing issues, it&#8217;s a good idea to keep a dictionary app open all the time. Or, if you&#8217;re the type that&#8217;s very grounded in the tangible world, a pocket thesaurus. If you&#8217;re a Mac user, you&#8217;ve already got Dictionary.app and built-in word lookups basically everywhere.</p>

<p>This whole <em>less is more</em> thing works in surprising places. And remember that people love to work with strong writers. Make the most of your paragraphs.</p>

<p>That, and when you use sophisticated vocabulary, you&#8217;re giving the reader an opportunity for a nice little educational experience. Who doesn&#8217;t like learning new words?</p>

<p>Everybody wins.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blade Extensions in Laravel]]></title>
    <link href="http://blog.zerilliworks.net/blog/2013/04/03/blade-extensions-in-laravel/"/>
    <updated>2013-04-03T10:42:00-04:00</updated>
    <id>http://blog.zerilliworks.net/blog/2013/04/03/blade-extensions-in-laravel</id>
    <content type="html"><![CDATA[<p><em>Note: This was originally written for Laravel 3, and may not apply in the more recent Laravel 4.</em></p>

<p>This one took me a little while to figure out, since it’s not particularly well documented. In Laravel, it’s possible to extend the syntax of the Blade template language with your own statements. I heard it mentioned once, and found a few functions <a href="http://laravel.com/api/source-class-Laravel.Blade.html#75">in the API documentation</a> which led me to creating customized Blade statements.</p>

<!--more-->


<h2>It&#8217;s Not That Difficult.</h2>

<p>Blade has a variety of built-in statements to manage the logic and rendering of your templates. At its core, Blade simply translates these statements into regular PHP. For example:</p>

<pre><code>@if(Session::has(‘login-errors’))
&lt;div class=”alert”&gt;&lt;h2&gt;Uh-oh! {{ Session::get(‘login-errors’) }} &lt;/h2&gt;&lt;/div&gt;
@endif
</code></pre>

<p>This set of statements looks in the Session for any login errors and displays them. Here, we used Blade’s <code>{{ }}</code> syntax for echoing statements, and the <code>@if</code> and <code>@endif</code> statements to make a decision. Once touched by Blade, it looks like this:</p>

<pre><code>&lt;?php if(Session::has(‘login-errors’)): ?&gt;
&lt;div class=”alert”&gt;&lt;h2&gt;Uh-oh! &lt;?php echo Session::get(‘login-errors’) ?&gt;&lt;/h2&gt;&lt;/div&gt;
&lt;?php endif; ?&gt;
</code></pre>

<p>There’s nothing too special about it now. It’s plain, regularly parseable PHP. Adding a Blade extension only means adding a few such substitutions yourself.</p>

<p>To register a Blade extension, you do this:</p>

<pre><code>Blade::extend(function($view) {
    // Statement code...
});
</code></pre>

<p><code>Blade::extend()</code> adds a closure function onto a stack of functions through which a view is run during the rendering process. All of the typical Blade statements are <a href="http://laravel.com/api/source-class-Laravel.Blade.html#186">defined in a similar manner.</a> The view is examined and all instances of <code>@if</code> are replaced with <code>&lt;?php if(): ?&gt;</code>, instances of <code>@render()</code> are replaced with <code>&lt;?php echo render() ?&gt;</code>, etc.</p>

<p>The <code>$view</code> variable will contain a plain text version of the view to be rendered, and the closure defined will perform the replacement of the custom Blade syntax with PHP statements. Both of these are handled as strings.</p>

<h2>Markup Extensions</h2>

<p>You could add custom Blade statements as a compact syntax for elements you frequently use. Let’s say you use a lot of Zurb Foundation’s progress bar components. You’d register the Blade extension like this:</p>

<pre><code>Blade::extend(function ($view) {
$html = "&lt;div class=\"progress\"&gt;&lt;span class=\"meter\"&gt;&lt;/span&gt;&lt;/div&gt;";
return str_replace("@progressbar", $html, $view);
});
</code></pre>

<p>And now, <code>@progressbar</code> becomes&#8230;</p>

<p><code>&lt;div class=”progress”&gt;&lt;span class=”meter”&gt;&lt;/span&gt;&lt;/div&gt;</code></p>

<p>Although that’s not particularly useful, since we can’t set the progress of the progress bar. Let’s tweak that Blade extension.</p>

<pre><code>Blade::extend(function ($view) {
$html = "&lt;div class=\"progress\"&gt;&lt;span class=\"meter\" style=\"width: $1%\"&gt;&lt;/span&gt;&lt;/div&gt;";
return preg_replace("#\s*@progressbar\(\s*([0-9]*)\s*\)#", $html, $view);
});
</code></pre>

<p>So if we use these:</p>

<pre><code>&lt;div class="row"&gt;
    &lt;div class="small-12 columns"&gt;
        @progressbar(75)
        @progressbar(10)
        @progressbar(43)
        @progressbar(100)
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>We end up with this:</p>

<p><img class="center" src="http://blog.zerilliworks.net/images/articles/blade-extensions-in-laravel/progressbars.png"></p>

<p>Now, we can use <code>@progressbar(XX%)</code> to specify a progress bar showing partial completion. It’s now possible to specify a percentage which the progress bar should represent. The closure extracts the number from our custom statement and uses it to set the CSS width property of the “meter” class element.</p>

<p>If you’re not too familiar with regular expressions, read up a bit on Wikipedia. A basic understanding isn&#8217;t too difficult to attain, and it&#8217;s logically straightforward to learn their proper use. The most important part is that this expression&#8230;</p>

<pre><code>\s*@progressbar\(\s*([0-9]*)\s*\)
</code></pre>

<p>&#8230;extracts the numbers as a sub-expression. These numbers are inserted into the <code>$1</code> symbol in the replacement text.</p>

<p>Simple string manipulation functions like <code>str_replace</code> (<a href="http://www.php.net/manual/en/function.str-replace.php">docs</a>) work well for one-off replacements like inserting static PHP code, but regex-capable functions such as <code>preg_replace</code> (<a href="http://www.php.net/manual/en/function.preg-replace.php">docs</a>) are necessary if you&#8217;re including some arguments or modifiers that require a RegEx to find and replace.</p>

<h2>Functional Extensions</h2>

<p>In this example, I&#8217;ll use the <a href="http://bundles.laravel.com/bundle/Browser">Laravel Browser bundle</a> to identify mobile users, and add some Blade extensions to change the rendering of templates for them.</p>

<figure class='code'><figcaption><span>routes.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nx">IoC</span><span class="o">::</span><span class="na">singleton</span><span class="p">(</span><span class="s1">&#39;Browser&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nx">Browser</span><span class="p">(</span><span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;HTTP_USER_AGENT&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//       @mobile statement               ///////////////////////////////////////////</span>
</span><span class='line'><span class="nx">Blade</span><span class="o">::</span><span class="na">extend</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$view</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s1">&#39;@mobile&#39;</span><span class="p">,</span> <span class="s2">&quot;&lt;?php if(IoC::resolve(&#39;Browser&#39;)-&gt;isMobile()): ?&gt;&quot;</span><span class="p">,</span> <span class="nv">$view</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//       @endmobile statement            ///////////////////////////////////////////</span>
</span><span class='line'><span class="nx">Blade</span><span class="o">::</span><span class="na">extend</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$view</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s1">&#39;@endmobile&#39;</span><span class="p">,</span> <span class="s2">&quot;&lt;?php endif; ?&gt;&quot;</span><span class="p">,</span> <span class="nv">$view</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//       @desktop statement              ///////////////////////////////////////////</span>
</span><span class='line'><span class="nx">Blade</span><span class="o">::</span><span class="na">extend</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$view</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s1">&#39;@desktop&#39;</span><span class="p">,</span> <span class="s2">&quot;&lt;?php if(!IoC::resolve(&#39;Browser&#39;)-&gt;isMobile()): ?&gt;&quot;</span><span class="p">,</span> <span class="nv">$view</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//       @enddesktop statement           ///////////////////////////////////////////</span>
</span><span class='line'><span class="nx">Blade</span><span class="o">::</span><span class="na">extend</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$view</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s1">&#39;@enddesktop&#39;</span><span class="p">,</span> <span class="s2">&quot;&lt;?php endif; ?&gt;&quot;</span><span class="p">,</span> <span class="nv">$view</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Your regular routes</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first operation registers an instance of the Browser class in the IoC container (<a href="http://laravel.com/docs/ioc">docs</a>). Browser is used to determine what user agent the client is running. In this case, it’s to distinguish users on desktop computers from users on phones and tablets. The IoC container handily keeps this instance ready for us. The code that follows registers the various Blade extensions with Laravel. There are four extensions illustrated here:</p>

<ul>
<li><code>@mobile</code></li>
<li><code>@endmobile</code></li>
<li><code>@desktop</code></li>
<li><code>@enddesktop</code></li>
</ul>


<p>The <code>@desktop</code> and <code>@enddesktop</code> statements will only render content between them if the user is on a desktop PC. This might be used to add sidebars or extra navigation material only on desktops, where there’s enough space to add such elements. <code>@mobile</code> and <code>@endmobile</code> do the same thing for mobile devices. These might be used to add sections of sites for mobile users, such as compact dashboards that are more suitable for phones and tablets. They also work with the <code>@else</code> Blade statement, since they’re really just PHP if statements. Nothing all that special about them.</p>

<p>I&#8217;ve mocked up a Blade template for a user&#8217;s dashboard on a food-tracking website. It&#8217;s a bit lengthy, but it&#8217;ll show you how to conditionally change content with Blade statements. In here, mobile users will see a condensed dashboard with large buttons, while desktop users will see a quick-add form, a search box, and a list of recent eats by friends. They also see different navigation components.</p>

<figure class='code'><figcaption><span>Using the mobile Blade extensions </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE HTML&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>An Absolutely Incredible Food App<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  @mobile
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>Welcome to our mobile site.<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  @endmobile
</span><span class='line'>  @desktop
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>Welcome to our site.<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  @enddesktop
</span><span class='line'>  
</span><span class='line'>  @mobile
</span><span class='line'>  <span class="nt">&lt;dl</span> <span class="na">class=</span><span class="s">&quot;sub-nav&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dt&gt;</span>Filter:<span class="nt">&lt;/dt&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dd&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>All<span class="nt">&lt;/a&gt;&lt;/dd&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dd&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Tasty<span class="nt">&lt;/a&gt;&lt;/dd&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dd&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Yucky<span class="nt">&lt;/a&gt;&lt;/dd&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dd&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Friends<span class="nt">&lt;/a&gt;&lt;/dd&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dl&gt;</span>
</span><span class='line'>  @endmobile
</span><span class='line'>  
</span><span class='line'>  @desktop
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;side-nav&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>All Foods<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Tasty Foods<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Yucky Foods<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Friend&#39;s Foods<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  @enddesktop
</span><span class='line'>  
</span><span class='line'>  @mobile
</span><span class='line'>  <span class="nt">&lt;h3&gt;</span>Mobile Dashboard<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;buttons&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/food/add&quot;</span><span class="nt">&gt;</span>Add Something You Ate<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/friends/foods&quot;</span><span class="nt">&gt;</span>What Your Friends Ate<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/list&quot;</span><span class="nt">&gt;</span>Eat List<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/messages&quot;</span><span class="nt">&gt;</span>Messages<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  @endmobile
</span><span class='line'>  
</span><span class='line'>  @desktop
</span><span class='line'>  <span class="nt">&lt;h3&gt;</span>Your Dashboard<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>  <span class="nt">&lt;form&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;new_food&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Put in a new food...&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span><span class="nt">&gt;</span>Add it!<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>  <span class="nt">&lt;form&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;search_foods&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Search for a food...&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span><span class="nt">&gt;</span>Find it!<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nt">&lt;table&gt;</span>
</span><span class='line'>      <span class="nt">&lt;thead&gt;</span>
</span><span class='line'>          <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>              <span class="nt">&lt;th&gt;</span>Date<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>              <span class="nt">&lt;th&gt;</span>Recent Food<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>              <span class="nt">&lt;th&gt;</span>Eaten By<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>              <span class="nt">&lt;th&gt;</span>YUMS and YUCKS<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>      <span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>          <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>              <span class="nt">&lt;td&gt;</span>Just Now<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>              <span class="nt">&lt;td&gt;</span>Pineapple Pizza<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>              <span class="nt">&lt;td&gt;</span>J. Kyle<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>              <span class="nt">&lt;td&gt;</span>5 YUMS and 13 YUCKS<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>              <span class="nt">&lt;td&gt;</span>2 hours ago<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>              <span class="nt">&lt;td&gt;</span>Breadsticks<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>              <span class="nt">&lt;td&gt;</span>M. Toledo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>              <span class="nt">&lt;td&gt;</span>8 YUMS and 0 YUCKS<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>              <span class="nt">&lt;td&gt;</span>3 hours ago<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>              <span class="nt">&lt;td&gt;</span>Raw Eggs<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>              <span class="nt">&lt;td&gt;</span>E. Ferguson<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>              <span class="nt">&lt;td&gt;</span>0 YUMS and 20 YUCKS<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/table&gt;</span>
</span><span class='line'>  @enddesktop
</span><span class='line'>  
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And after running through Blade and our custom extensions, that view looks like this:</p>

<figure class='code'><figcaption><span>After rendering </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&lt;!DOCTYPE HTML&gt;</span>
</span><span class='line'><span class="x">&lt;head&gt;</span>
</span><span class='line'><span class="x">  &lt;title&gt;An Absolutely Incredible Food App&lt;/title&gt;</span>
</span><span class='line'><span class="x">&lt;/head&gt;</span>
</span><span class='line'><span class="x">&lt;body&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">if</span><span class="p">(</span><span class="nx">IoC</span><span class="o">::</span><span class="na">resolve</span><span class="p">(</span><span class="s1">&#39;Browser&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">isMobile</span><span class="p">())</span><span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;h1&gt;Welcome to our mobile site.&lt;/h1&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">IoC</span><span class="o">::</span><span class="na">resolve</span><span class="p">(</span><span class="s1">&#39;Browser&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">isMobile</span><span class="p">())</span><span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;h1&gt;Welcome to our site.&lt;/h1&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span>
</span><span class='line'><span class="x">  </span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">if</span><span class="p">(</span><span class="nx">IoC</span><span class="o">::</span><span class="na">resolve</span><span class="p">(</span><span class="s1">&#39;Browser&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">isMobile</span><span class="p">())</span><span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;dl class=&quot;sub-nav&quot;&gt;</span>
</span><span class='line'><span class="x">    &lt;dt&gt;Filter:&lt;/dt&gt;</span>
</span><span class='line'><span class="x">    &lt;dd&gt;&lt;a href=&quot;#&quot;&gt;All&lt;/a&gt;&lt;/dd&gt;</span>
</span><span class='line'><span class="x">    &lt;dd&gt;&lt;a href=&quot;#&quot;&gt;Tasty&lt;/a&gt;&lt;/dd&gt;</span>
</span><span class='line'><span class="x">    &lt;dd&gt;&lt;a href=&quot;#&quot;&gt;Yucky&lt;/a&gt;&lt;/dd&gt;</span>
</span><span class='line'><span class="x">    &lt;dd&gt;&lt;a href=&quot;#&quot;&gt;Friends&lt;/a&gt;&lt;/dd&gt;</span>
</span><span class='line'><span class="x">  &lt;/dl&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">IoC</span><span class="o">::</span><span class="na">resolve</span><span class="p">(</span><span class="s1">&#39;Browser&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">isMobile</span><span class="p">())</span><span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;ul class=&quot;side-nav&quot;&gt;</span>
</span><span class='line'><span class="x">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;All Foods&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="x">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Tasty Foods&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="x">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Yucky Foods&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="x">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Friend&#39;s Foods&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="x">  &lt;/ul&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">if</span><span class="p">(</span><span class="nx">IoC</span><span class="o">::</span><span class="na">resolve</span><span class="p">(</span><span class="s1">&#39;Browser&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">isMobile</span><span class="p">())</span><span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;h3&gt;Mobile Dashboard&lt;/h3&gt;</span>
</span><span class='line'><span class="x">  &lt;div class=&quot;buttons&quot;&gt;</span>
</span><span class='line'><span class="x">      &lt;a href=&quot;/food/add&quot;&gt;Add Something You Ate&lt;/a&gt;</span>
</span><span class='line'><span class="x">      &lt;a href=&quot;/friends/foods&quot;&gt;What Your Friends Ate&lt;/a&gt;</span>
</span><span class='line'><span class="x">      &lt;a href=&quot;/list&quot;&gt;Eat List&lt;/a&gt;</span>
</span><span class='line'><span class="x">      &lt;a href=&quot;/messages&quot;&gt;Messages&lt;/a&gt;</span>
</span><span class='line'><span class="x">  &lt;/div&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">IoC</span><span class="o">::</span><span class="na">resolve</span><span class="p">(</span><span class="s1">&#39;Browser&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">isMobile</span><span class="p">())</span><span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;h3&gt;Your Dashboard&lt;/h3&gt;</span>
</span><span class='line'><span class="x">  &lt;form&gt;</span>
</span><span class='line'><span class="x">      &lt;input type=&quot;text&quot; name=&quot;new_food&quot; placeholder=&quot;Put in a new food...&quot;/&gt;</span>
</span><span class='line'><span class="x">      &lt;button type=&quot;submit&quot;&gt;Add it!&lt;/button&gt;</span>
</span><span class='line'><span class="x">  &lt;/form&gt;</span>
</span><span class='line'><span class="x">  &lt;form&gt;</span>
</span><span class='line'><span class="x">      &lt;input type=&quot;text&quot; name=&quot;search_foods&quot; placeholder=&quot;Search for a food...&quot;/&gt;</span>
</span><span class='line'><span class="x">      &lt;button type=&quot;submit&quot;&gt;Find it!&lt;/button&gt;</span>
</span><span class='line'><span class="x">  &lt;/form&gt;</span>
</span><span class='line'><span class="x">  </span>
</span><span class='line'><span class="x">  &lt;table&gt;</span>
</span><span class='line'><span class="x">      &lt;thead&gt;</span>
</span><span class='line'><span class="x">          &lt;tr&gt;</span>
</span><span class='line'><span class="x">              &lt;th&gt;Date&lt;/th&gt;</span>
</span><span class='line'><span class="x">              &lt;th&gt;Recent Food&lt;/th&gt;</span>
</span><span class='line'><span class="x">              &lt;th&gt;Eaten By&lt;/th&gt;</span>
</span><span class='line'><span class="x">              &lt;th&gt;YUMS and YUCKS&lt;/th&gt;</span>
</span><span class='line'><span class="x">          &lt;/tr&gt;</span>
</span><span class='line'><span class="x">      &lt;/thead&gt;</span>
</span><span class='line'><span class="x">      &lt;tbody&gt;</span>
</span><span class='line'><span class="x">          &lt;tr&gt;</span>
</span><span class='line'><span class="x">              &lt;td&gt;Just Now&lt;/td&gt;</span>
</span><span class='line'><span class="x">              &lt;td&gt;Pineapple Pizza&lt;/td&gt;</span>
</span><span class='line'><span class="x">              &lt;td&gt;J. Kyle&lt;/td&gt;</span>
</span><span class='line'><span class="x">              &lt;td&gt;5 YUMS and 13 YUCKS&lt;/td&gt;</span>
</span><span class='line'><span class="x">          &lt;/tr&gt;</span>
</span><span class='line'><span class="x">          &lt;tr&gt;</span>
</span><span class='line'><span class="x">              &lt;td&gt;2 hours ago&lt;/td&gt;</span>
</span><span class='line'><span class="x">              &lt;td&gt;Breadsticks&lt;/td&gt;</span>
</span><span class='line'><span class="x">              &lt;td&gt;M. Toledo&lt;/td&gt;</span>
</span><span class='line'><span class="x">              &lt;td&gt;8 YUMS and 0 YUCKS&lt;/td&gt;</span>
</span><span class='line'><span class="x">          &lt;/tr&gt;</span>
</span><span class='line'><span class="x">          &lt;tr&gt;</span>
</span><span class='line'><span class="x">              &lt;td&gt;3 hours ago&lt;/td&gt;</span>
</span><span class='line'><span class="x">              &lt;td&gt;Raw Eggs&lt;/td&gt;</span>
</span><span class='line'><span class="x">              &lt;td&gt;E. Ferguson&lt;/td&gt;</span>
</span><span class='line'><span class="x">              &lt;td&gt;0 YUMS and 20 YUCKS&lt;/td&gt;</span>
</span><span class='line'><span class="x">          &lt;/tr&gt;</span>
</span><span class='line'><span class="x">      &lt;/tbody&gt;</span>
</span><span class='line'><span class="x">  &lt;/table&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span>
</span><span class='line'><span class="x">&lt;/body&gt;</span>
</span><span class='line'><span class="x">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When creating Blade extensions, you can use whatever string modification function you’d like as long as it returns <code>$view</code> in full. Unless, I suppose, you want to clip out chunks of the view&#8217;s data. Can&#8217;t come up with a practical case in which that would help, but who knows? Just remember that you&#8217;re modifying the <em>whole view before it&#8217;s rendered</em>, so be careful not to have any runaway regexes or imprecise matching.</p>

<p>You can also feel pretty free to add Blade extensions to your project. Markup extensions require almost no overhead, since Laravel caches rendered pages. Functional extensions are parsed into PHP first, so they&#8217;re remarkably quick to render as well. Blade extensions are a great way to save time for small snippets you use often and are more compact than rendering a partial view. I suppose you shouldn&#8217;t go <em>too</em> crazy with them, or you might end up putting them together in ways that could better be served by a partial or view composer. Blade extensions should be sprinkled. If you&#8217;ve ended up putting most of your markup in Blade extensions you might be doing it wrong.</p>

<p>There it is. I hope this helped you figure out Blade extensions. They&#8217;re really easy to use and can leverage the convenience and expression of Blade in specialized ways. You could even create a bundle that contains your favorite Blade extensions. All you&#8217;d have to do is register them in the bundle&#8217;s start.php file and tell Laravel to auto-load it. Easy as Sunday morning.</p>

<p>Good luck, and happy coding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AJAX Loading Done Right (and Wrong)]]></title>
    <link href="http://blog.zerilliworks.net/blog/2013/03/31/ajax-loading-done-right/"/>
    <updated>2013-03-31T23:17:00-04:00</updated>
    <id>http://blog.zerilliworks.net/blog/2013/03/31/ajax-loading-done-right</id>
    <content type="html"><![CDATA[<p>Oh man. This really bothers me. Some of the time, it&#8217;s just not well-implemented. And when it is, I always appreciate it.</p>

<p><em>Note: For non-technical people, AJAX loading is a term for what browsers do when they load more content without needing to load another page. A good example is Facebook news feeds. I&#8217;ll use it interchangeably with terms such as dynamic loading or auto loading.</em></p>

<p>A lot of websites just love to keep streaming content into your browser, sometimes as you&#8217;re scrolling along. Done properly, this is a useful annoyance-relieving tool. When botched, AJAX loading is an obtuse pain in the ass. In this post, I&#8217;ll look into mostly good implementations to show you the reasons these work pretty well. Usually.</p>

<!-- more -->


<p>Let me provide a real-life analogy. Click/tap on any image in this article for a full-size version.</p>

<p><a href="http://blog.zerilliworks.net/images/articles/hotel-doors/checkin_notice.jpg"><img src="http://blog.zerilliworks.net/images/articles/hotel-doors/checkin_notice.jpg"></a></p>

<p>That&#8217;s an important notice about checkin times. Should probably read that. It&#8217;s just suction-cupped to the sliding doors. But I can&#8217;t quite read it from back here.</p>

<p><a href="http://blog.zerilliworks.net/images/articles/hotel-doors/thats_convenient.jpg"><img class="left" src="http://blog.zerilliworks.net/images/articles/hotel-doors/thats_convenient.jpg"></a></p>

<p>I could still go get up close and try to read it, but I tried and stood out of the way of the sensors and the doors closed again. This is basically no different from an improper implementation of dynamic content loading in social sites. So this is what I think of all that.</p>

<p>Firstly, you&#8217;re in trouble if you think people always want to see more. I think it can be more intuitive. Assume people want to see <em>less</em> and that they will <em>ask</em> for more. Quick case study: Vimeo.</p>

<p>When you log in to Vimeo, you&#8217;ll see a feed of videos added to the channels you follow in a nice little list there. It shows about ten items to start with. At the bottom, there&#8217;s a link that says &#8220;Load more videos&#8221;. Once you&#8217;ve clicked that, it turns on AJAX loading of more entries. Toggling auto loading AND limiting the information inflow? Atta boy.</p>

<p><a href="http://blog.zerilliworks.net/images/articles/ajax_examples/Vimeo.png"><img class="center" src="http://blog.zerilliworks.net/images/articles/ajax_examples/Vimeo.png" title="&#34;Toggling auto loading AND limiting the information inflow? Atta boy.&#34;" alt="&#34;Toggling auto loading AND limiting the information inflow? Atta boy.&#34;"></a></p>

<h3><strong>GOOD JOB, VIMEO.</strong></h3>

<p>Try being conservative. I&#8217;ve heard a lot of complaints about these loading methods taking up too much space, but I don&#8217;t think anyone&#8217;s ever complained about <em>not</em> being flooded with information. Give us the choice, please.</p>

<p>Sometimes, you can&#8217;t stop it. There&#8217;s no choice. You have to keep scrolling forever, until you run out of things to scroll by. Or your fingers fall off, or the friction on your scroll wheel makes it catch fire. Case Study: Facebook.</p>

<p>Facebook will always show you more. There are some handy links at the bottom of Facebook pages (like the developer links or the Help and Privacy links), but it&#8217;s unlikely that you&#8217;d ever see them for more than a split second. The feed is pushing interface elements out of the way. That&#8217;s a tad annoying. I mean, why even put them down there?</p>

<p><a href="http://blog.zerilliworks.net/images/articles/ajax_examples/Facebook.png"><img class="center" src="http://blog.zerilliworks.net/images/articles/ajax_examples/Facebook.png" title="&#34;AJAX loading is pushing interface elements out of the way. That's a tad annoying.&#34;" alt="&#34;AJAX loading is pushing interface elements out of the way. That's a tad annoying.&#34;"></a></p>

<h3><strong>CLOSE BUT NO CIGAR, FACEBOOK.</strong></h3>

<p>I&#8217;ve got one more positive example of sites that keep adding to pages: Myspace. The New Myspace features a radically reconstructed design, with one of the slickest web app UIs I have ever seen. I&#8217;m serious, I have never been remotely interested in Myspace until they unveiled the new design. My praise for it is worthy of another post, however.</p>

<p>The horizontal layout of the new Myspace enables nicer persistent navigation elements than your standard sticky nav bars. While scrolling horizontally through social feeds, more items are loaded on the right, where there are no controls or even optionally accessible elements to shove out of the way. Myspace consolidated their important interface element in places that were always visible. Scroll as much as you like, that navigation box isn&#8217;t going anywhere. It always floats above other content and remains on the left.</p>

<p><a href="http://blog.zerilliworks.net/images/articles/ajax_examples/myspace.png"><img class="center" src="http://blog.zerilliworks.net/images/articles/ajax_examples/myspace.png" title="&#34;Scroll as much as you like, that navigation box isn't going anywhere.&#34;" alt="&#34;Scroll as much as you like, that navigation box isn't going anywhere.&#34;"></a></p>

<h3><strong>WAY TO BREAK THE MOLD, MYSPACE.</strong></h3>

<p>To be fair, Facebook has been sticking their blue nav bar to the top for a long time. That does help navigate, but with less granularity and flexibility than Myspace&#8217;s collapsable vertical navigation lists.</p>

<p>Lemme bring up another common AJAX loading annoyance, that being live streams of things. It&#8217;s sort of the inverted version of what I&#8217;ve been describing so far. Streaming updates are big in the social world, and pretty much every social site has them. But Tiwtter tightened the screws a bit for the sake of convenience and efficiency. Twitter just has the little &#8220;(n) new Tweets&#8221; button that you get to push to refresh your feed. I thought this should be common practice, but it has added purpose for Twitter users. If you&#8217;re following a lot of people, you might get a Tweet every five seconds. Hardly enough time to read them all before they get pushed out of the way by newer ones.</p>

<p>So instead you get to read them at your leisure, load more, and read that new chunk of them. MUCH BETTER.</p>

<p>Twitter gets it right because it helps wrangle the kind of data they present. Streams of tweets should be well-controlled. Adding AJAX loading without thought can cause frustrations if you deal with data that&#8217;s always trickling in. Like Twitter.</p>

<p><a href="http://blog.zerilliworks.net/images/articles/ajax_examples/Twitter.png"><img class="center" src="http://blog.zerilliworks.net/images/articles/ajax_examples/Twitter.png" title="&#34;Control the flow and know how much new information is about to hit.&#34;" alt="&#34;Control the flow and know how much new information is about to hit.&#34;"></a></p>

<h3><strong>SMART MOVE, TWITTER.</strong></h3>

<p>I&#8217;ll do one more case study for a good implementation of streaming updates: Koding, a hip new social coding and developer network. Koding has an activity feed, a prominent one, where it encourages people to share code and ask questions, among other things. When you&#8217;ve got your scroll positioned at the very top a little Live Update toggle turns on. This means that as long as you&#8217;re right at the top of the list, it will auto-load updates. This is good. Scrolling down even a little, however, will toggle the feature off, so no more updates stream in live and shuffle around something you may be skimming over. It allows you to control the flow of data, and that data is what we want to consume at our own pace, right?</p>

<p><a href="http://blog.zerilliworks.net/images/articles/ajax_examples/Koding.png"><img class="center" src="http://blog.zerilliworks.net/images/articles/ajax_examples/Koding.png" title="&#34;Being able to toggle AJAX loading helps a lot. Please do this more.&#34;" alt="&#34;Being able to toggle AJAX loading helps a lot. Please do this more.&#34;"></a></p>

<h3><strong>GOOD ON YA, KODING.</strong></h3>

<p>By the way, I&#8217;m working on a write-up of Koding, so that&#8217;ll give you a better idea of how everything fits together.</p>

<p>How about some bad reasons to use it? It certainly depends on the nature of the content you provide. Social sites love it because data is always coming in, and they can&#8217;t be certain of how much you&#8217;ve seen and what you&#8217;ve missed. So why not let you keep rolling until you&#8217;ve had your fill? Sensible enough. I picked at Facebook because they still had a footer. Seriously, they are mutually exclusive. Why even have something that just gets bumped all the time?</p>

<p>It also puts a burden on the client. The browser is in charge of managing everything, and if you leave Facebook open for a long time, you might find your browser getting a bit sluggish. It adds a lot of complexity for sometimes marginal gain.</p>

<p>If you&#8217;re not careful, it can also break the flow of a reader&#8217;s traversal through information. Most AJAX-loading sites don&#8217;t pick up where you left off if you click a link and go back. If your site has you jumping in and out of links, like on an infinite-scrolling tumblr blog, it can break. You get capped at the initial end of the page as the browser tries to scroll back down to where you were.</p>

<p>Auto-loading blog posts is typically bad practice, so I think.</p>

<p>Another worry is making your content grey. Generic and blended together. Nondistinct. Pinterest suffers this, and <a href="http://mcfunley.com/design-for-continuous-experimentation">so did Etsy for a while</a> (skip to slide 25.) Infinite scrolling establishes <em>momentum</em>, meaning users get rolling and look at each piece of data for a fraction of a second. It&#8217;s hard to tell stuff apart. It&#8217;s possible to fly by thousands of items and really only see a handful. It encourages haste, and that leads to minimal engagement.</p>

<p>If your implementation of infinite scrolling pushes away interface elements, fuses elements into a blur of unremarkability, or breaks a clean traversal of references and links, you might need to re-think it. Essentially, support your data and the behavior of your users.</p>

<p>One last case I&#8217;ll mention: Google.</p>

<p>Google&#8217;s search results don&#8217;t auto-load. Web results, anyway. They&#8217;re still paginated the old-fashioned way. Why? Because AJAX loading is a feature that only a minuscule proportion of Googlers would ever need. How often does the proper result of a search come up on anything but the first page? For me, almost never. Google is confident enough to assume that you&#8217;ll almost never need to zip through long lists of results.</p>

<p>By contrast, users of DuckDuckGo see that search results are auto-loaded as you scroll. This is because, while DDG is pretty good, its results tend to be less relevant than Google. People need to scroll more, so the site supports that behavior.</p>

<p>C&#8217;mon, guys. It&#8217;s not actually that hard. Make the flow of data support the behavior of your users and the type of content you deliver. Sometimes, just don&#8217;t use it. Why is pagination so bad? What ever happened to getting to pick the number of results per page? Really, what was so terrible about that? I think we just got a little caught up with the ability to avoid page reloads.</p>

<p><a href="http://blog.zerilliworks.net/images/articles/ajax_examples/Google.png"><img class="center" src="http://blog.zerilliworks.net/images/articles/ajax_examples/Google.png" title="&#34;Was pagination so terrible?&#34;" alt="&#34;Was pagination so terrible?&#34;"></a></p>

<p>Seriously. Is this actually such a horrible thing? I doubt it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm Here for the Evolution]]></title>
    <link href="http://blog.zerilliworks.net/blog/2013/03/28/im-here-for-the-evolution/"/>
    <updated>2013-03-28T04:47:00-04:00</updated>
    <id>http://blog.zerilliworks.net/blog/2013/03/28/im-here-for-the-evolution</id>
    <content type="html"><![CDATA[<p>I never really addressed this, so I&#8217;ll do it now. I&#8217;ve been programming as an amateur for a long time. I&#8217;m almost 20, and it&#8217;s really grown into my primary focus over the last few years. I&#8217;d like to share what led up to the starting of this blog. It&#8217;s only a part of a big change for me.</p>

<!-- more -->


<h2>It started with a startup.</h2>

<p>Early last year, I began working for a startup company here in Ithaca. A bright and clever young team with a great idea and unstoppable motivation. We were little guys trying to launch a new film distribution company. For other little guys, too: Independent filmmakers.</p>

<p>It was a business forged from passion. We were all film buffs and attended film school, which means we had all seen some gems get passed over and lost in even niche film interest groups. Seriously, high-caliber films made by incredibly smart people. We couldn&#8217;t believe they weren&#8217;t more popular. We watched every film we acquired, and movie night came right after every meeting.</p>

<p><span class='pullquote-right' data-pullquote='It was absolutely thrilling.'>
I was their only software developer. We were just getting started, and funding was still iffy, but we worked tirelessly. I was given complete control over the technology, and I had never had such a big responsibility. It was absolutely thrilling. If I wanted to ship a new feature, I didn&#8217;t ask anybody. As long as I kept my priorities straight, I could implement whatever I wanted. They trusted me with their website, and I took good care of it.
</span></p>

<p>We continued acquiring films and building features and spreading the word. We actually landed some award-winning short films in the beginning, personally vetted by each of us. We went to Tribeca and interviewed with startup incubators. This was a startup in every sense of the word, and that was totally new to me. It was beyond exciting.</p>

<p><span class='pullquote-right' data-pullquote='I still get poignant flashbacks when I say that things turned sour.'>
I still get poignant flashbacks when I say that things turned sour. I was literally losing my mind from the stress and we began to shed some connections from circumstances beyond our control. I snapped after a heated exchange with my partners wherein I learned we severely differed on some core principles, which I felt morally opposed to. Things started to get fishy, and I had to leave. Not only was my health degrading, but I discovered a shocking truth that day. These were good people, but the chemistry turned out to be completely wrong. After parting ways, everything fell apart. The company made a failed attempt at crowd-sourced funding and garnered only lukewarm reception in a film festival partnership. Sometimes I felt like I let a lot of people down. I felt like the biggest failure imaginable. I had never been more lost or embarrassed.
</span></p>

<p>All things considered, it was actually a burnout waiting to happen. I couldn&#8217;t have kept that work up. No one could for long. We weren&#8217;t doing it quite right. It felt like a part of me died when the company crumbled, and it still bothers me to this day.</p>

<p>I lapsed into seclusion. I kept programming, but I did it behind closed doors. I continued to teach myself as I typically did, but there was always something nagging me with every method I wrote. Something that told me I should be ashamed of what I was doing, that somehow it wasn&#8217;t good enough. It was so bad some days that I would start up my IDE and stare at the new project wizard for a minute before quitting it and watching television. I was afraid to even start something.</p>

<p>The failure of that startup really got to me. I may not have invested much more than time, but it hurt a lot. I didn&#8217;t consult with anybody. And sometimes I lied about it. That nagging voice telling me I wasn&#8217;t perfect degraded the quality of my work. I let things slide because I was always doubting myself. I tried again and again to produce marketable ideas, but just couldn&#8217;t make them work. I felt dead-ended. I have struggled with depression before, and it made a strong resurgence during this period. I had never felt lower.</p>

<p><span class='pullquote-right' data-pullquote='As it turns out, every problem I faced could somehow or another be traced back to my isolated nature.'>
Around Christmas last year, things finally started to change. I produced a solid idea, one that I found useful and relevant, something I was compelled to work on. I kept hitting some roadblocks, which prompted me to do a little thinking about what was sticking its thorns in me. As it turns out, every problem I faced could somehow or another be traced back to my isolated nature.
</span></p>

<p>I had been social, of course, but my work was secret. I was afraid of sharing anything. I realized that had to change.</p>

<p>I perused forums, I signed up for mailing lists and message boards. I signed up for Github and put up a repository of my own. Even though that repository was pretty worthless, it was a symbolic step for me. <a href="http://blog.zerilliworks.net/projects/shadowcv">That project was one of my first</a>, and now there is nothing to hide about it. I hadn&#8217;t been very open before, so I&#8217;m taking more steps now. I&#8217;ve also netted myself an account with a hip new programmer&#8217;s network called <a href="http://koding.com">Koding.</a> I&#8217;m asking questions and seeking advice. I really want to be the best programmer I can, and I know that&#8217;s impossible if I stay in my bubble. No matter how good I get at Trivial Pursuit while I&#8217;m here.</p>

<p>This blog may be unremarkable on the scale of the Internet, but it is <em>huge</em> for me. Maybe my ideas really are unique and interesting. Maybe I&#8217;ll make a connection to someone that kicks my ass and changes the way I think forever. And what if by letting go of my comforting solitude I flourish enough to create the systems I dream about? I would be crazy to ignore these possibilities.</p>

<p>The people that know me personally might find me socially capable and outgoing. In many cases that&#8217;s true. But professionally and with my work, I never talked to anyone seriously. I had chats about what I do, but I couldn&#8217;t connect. I am hoping that changes.</p>

<p><span class='pullquote-right' data-pullquote='I don&#8217;t want to cover up my weaknesses anymore.'>
So here I am. I&#8217;ve accepted my past shortcomings and I&#8217;m playing to my strengths. I don&#8217;t want to cover up my weaknesses anymore. I want to bring them into the light and be realistic about them. If I can fill in these weaknesses, I will. Even if I can&#8217;t, I&#8217;ll gain insight into the ways I can best support my work and the work of those I collaborate with.
</span></p>

<p>As I say often, all I&#8217;ve ever wanted to do is help people, and that means accepting help when I need it.</p>

<p>I am beyond grateful for any advice I get through the things I write and I can&#8217;t be appreciative enough of the time anyone spends helping me. I realize now that we&#8217;re all in this together, and being a vigilante was crippling me. I need to embrace the world, and I&#8217;ve been truly inspired by a lot of really smart programmers and genuine technologists who are all looking to improve the world around them. I&#8217;ve probably sent you emails at some point or another, you know who you are. Thank you. Truly.</p>

<p>That&#8217;s why I do this. I want to learn. I do this for me right now, but I hope that it may help others and eventually become a channel through which I can return the favors I&#8217;ve been granted.</p>

<h2>Hello, world. I&#8217;m Armand. And I&#8217;m here to evolve.</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cry Me a River, Emails]]></title>
    <link href="http://blog.zerilliworks.net/blog/2013/03/26/cry-me-a-river-emails/"/>
    <updated>2013-03-26T00:59:00-04:00</updated>
    <id>http://blog.zerilliworks.net/blog/2013/03/26/cry-me-a-river-emails</id>
    <content type="html"><![CDATA[<h3>Or: Why You Should NEVER Make Robots Fake Sincerity</h3>

<p>While helping a friend construct a website, I signed up for Weebly. I didn&#8217;t even have a website, I was just a collaborator. I didn&#8217;t want anything to do with Weebly. For some reason, she began getting uncomfortably clingy. Look at this as an example of how to creep out your customers.</p>

<!-- more -->


<p>I&#8217;ll be clear now that I do not like drag-and-drop site builders. Only one such service have I ever described in terms that may be optimistically construed as &#8220;fond&#8221; &#8211; that service being Squarespace. And that&#8217;s only because they opened up their internals to developers.</p>

<p>So have a look at this.</p>

<p><img src="http://blog.zerilliworks.net/images/articles/Weebly-Believing.png" title="Don't stop believin' (in your website)" ></p>

<p><a href="http://blog.zerilliworks.net/extras/weebly-believing.html">If you can&#8217;t see the image, click here for the text version.</a></p>

<p>The time since I signed up is probably the second worst thing about this. It&#8217;s just odd. It reminds me that there is some task somewhere (clearly not a human) that is looking over less-than-frequently-active accounts and telling them to get going. It&#8217;s unbelievably insincere, and it&#8217;s frankly a little condescending. How so?</p>

<blockquote><p>Maybe you got busy and forgot about your website. We understand. When you signed up you probably had a vision for your site. We want to help you make that a reality. We promise that Weebly truly is the easiest way to create a website.</p></blockquote>

<p>Of course I had a vision. Perhaps I own a business, I sell goods, I&#8217;m an artist, I&#8217;m a traveller, I&#8217;m a game show contestant with a penchant for blogging. What&#8217;s gonna matter is my content. If I&#8217;m passionate enough, I&#8217;ll find the best way to present it. I am disinclined to believe that anyone who has any real desire to run a website would forget about it for 29 days, 16 hours, 7 minutes and 47 seconds.</p>

<p>This helpful message is a little too chummy. It is certainly not sincerely endorsed by the Weebly Team, it was sent by a robot that&#8217;s been told how to sound friendly. A person wrote generic text without much thought and I was on the receiving end of a template engine fed with those words. Nothing really makes me feel less cared for than robots acting like people. Giving them a little personality can be okay, but this is kind of insulting. Is your team actually nervous that I might not realize the full potential of my business? That&#8217;s something investors worry about. And something robots think nothing of.</p>

<p>Then this happens:</p>

<p><img src="http://blog.zerilliworks.net/images/articles/Weebly-Sniffle.png" title="Sniffle. Sniffle..." ></p>

<p><a href="http://blog.zerilliworks.net/extras/weebly-sniffle.html">If you can&#8217;t see the image, click here for the text version.</a></p>

<p>The subject of this message was literally &#8220;That&#8217;s sad.&#8221; No, this email is the sad thing. You trained machines to sound sympathetic, and it&#8217;s just unsettling to make them cry. <em>For the love of God, knock it off.</em> There&#8217;s nothing wrong with the concept of automated messages. But <em>please</em> do not make them f&#8211;king cry. That does not make me feel cared for. Your team doesn&#8217;t seem to be there for me, it seems like you need to clutch your flaky customers in a death grip.</p>

<p>Don&#8217;t fret though, you fantastically sincere liars, I think this email could be fixed pretty easily.</p>

<p><img src="http://blog.zerilliworks.net/images/articles/Weebly-Sniffle-fixed.png" title="Just take a Sharpie to it." ></p>

<p>There. That&#8217;s basically free advice, Weebly. If your team is feeling sincere and nervous and sympathetic, my typical consulting fee is $17,000.</p>

<p>For the record, one of their founders eventually sent me a personal email asking for feedback. Way to go, fellas. That&#8217;s where you lay on the charm, in the actual exchanges between actual people. That redeemed their support team a bit. That was someone who was really wondering what went wrong and wanted to find a solution. I&#8217;m not being sarcastic there, if you&#8217;re looking to connect with a customer, a real live human being is the way to do it. I absolutely love that.</p>

<p>Sending automated emails that cry is tantamount to deception. That&#8217;s what I have to say to them.</p>

<p>I can&#8217;t be the only person that feels this way. I very highly value genuine interactions, and pretty much any attempt to imbue emotion without real effort is simply insulting to me.</p>

<p>Seriously, without the mendacious nervousness and sniffles, these would be just helpful emails. I might have read them without rolling my eyes.</p>

<p>If you&#8217;re someone who also dislikes this sort of indiscretion, I&#8217;d appreciate a comment so I know I&#8217;m not alone.</p>

<p>Also, if you happen to be an English professor and would like to tell me whether I should have used <em>whom</em> in that last sentence, I would appreciate it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Complicated or Other Kind of Complicated?]]></title>
    <link href="http://blog.zerilliworks.net/blog/2013/03/17/complicated-or-other-kind-of-complicated/"/>
    <updated>2013-03-17T03:01:00-04:00</updated>
    <id>http://blog.zerilliworks.net/blog/2013/03/17/complicated-or-other-kind-of-complicated</id>
    <content type="html"><![CDATA[<p>I make a lot of choices while working on a project, mostly a large collection of tiny architectural choices that will impact how I build my applications. The words  <em>simple</em> and <em>complicated</em>, I&#8217;ve found, are very deceptive blanket statements. Sometimes, I have to trade off different kinds of complexity that add upp to the greatest efficiency versus smallest amount of frustration.</p>

<!-- more -->


<h2>Sometimes You Can&#8217;t Win.</h2>

<p>There are so many different ideas about the easiest/best/fastest/simplest way to do things. Seems like everyone&#8217;s got a philosophy. <strong>NOW, THERE IS NOTHING INHERENTLY WRONG WITH THAT.</strong> I&#8217;ve got my own little bubble of philosophy I like to stick to. The unfortunate part is that there is a pretty wide spectrum of impresicse language that <a href="http://en.wikipedia.org/wiki/Wikipedia:Manual_of_Style/Words_to_watch#Puffery">attribute ambiguous meaning to ideas without much factual support.</a></p>

<p>I&#8217;ll give an example. I&#8217;m laying out all the bits and pieces of a medical app right now, and I&#8217;m at the pivotal point of getting to pick what language and framework I&#8217;ll be using. I&#8217;ve surveyed a bunch of web technologies to choose the best <em>(with &#8220;best&#8221; being a relative term).</em></p>

<p>Everybody wants simplicity, but be aware what you may be trading it for. In my case, I&#8217;m choosing between PHP with the <a href="http://laravel.com/">Laravel</a> framework or Ruby on Rails. Familiarity is the big discrepancy. Both parties have proponents and those who preach the beautiful elegance of their respective platform. But PHP is at heart an icky language and I know little about serious use of Ruby at this point. <strong>DAMN.</strong></p>

<p>And when they dangle s&#8211;t like this in front of you:</p>

<p><img src="http://blog.zerilliworks.net/images/articles/rails.png" alt="Ruby on Rails homepage banner" /></p>

<p><strong>WHO COULD POSSIBLY RESIST?</strong></p>

<p>Tread lightly, Armand. Don&#8217;t get caught up in the sparkling beauty of these systems. Remember that something&#8217;s gotta give and to barter for the kind of complexity you can handle best.</p>

<p>I know PHP and Laravel very well, meaning I could get straight to work building the app. Rails seems super slick, though I admittedly know little about it. I&#8217;d have to learn everything while I work. As I mentioned in <a href="http://blog.zerilliworks.net/blog/2013/03/09/preeow/">my introductory post</a>, I love learning, but I take my sweet time to get the in-depth understanding I desire.</p>

<p>I get easily flustered when I begin to subscribe to everyone&#8217;s callouts regarding the streamlined versus the intricate. Not all complications have to be crippling, but be sure to pick them carefully. Until we start writing our apps with LOVE (<a href="http://worldofgoo.wikia.com/wiki/MOM"><em>a new scripting language where you write applications using &#8216;feelings&#8217;</em></a>) I believe these sorts of choices will continue to thornily remind us of their irksomeness.</p>

<p>Pick your manifold code-wads with care.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Octopress?]]></title>
    <link href="http://blog.zerilliworks.net/blog/2013/03/16/why-octopress/"/>
    <updated>2013-03-16T14:40:00-04:00</updated>
    <id>http://blog.zerilliworks.net/blog/2013/03/16/why-octopress</id>
    <content type="html"><![CDATA[<p>I could have just tossed a WordPress installation up somewhere. It probably would have taken less time
to set up. But I&#8217;m not a big fan of WordPress. I&#8217;m not a big fan of anything that needs extra plugins to
be reasonably secure. I like fast and simple. AND NOW HERE I AM.</p>

<!-- more -->


<p>Any seasoned (or even soft-boiled) developer realizes the potential of the terminal. I&#8217;m not an average
web user. I shouldn&#8217;t have to learn the lingo of the CMS du-jour. if I want to build a good site or blog. I
should be able to use basically three skills: Git, Markdown, and the terminal. No dicking through page
after page of backend material. I already know these things, and they have proven themselves as my most
enjoyable tools to use.</p>

<p>I also wanted this blog to be fast. Software like WordPress, Movable Type, MojoMotor, Drupal&#8230; They&#8217;re
burdened with significant overhead of processing and delivering pages. Some have plugins to help, but
I think that we shouldn&#8217;t even need them. Why would you ship a slow product and have third parties make
it safe and efficient? Seems like skipping a step.&dagger;</p>

<p>I don&#8217;t want to pick on WordPress too much. Automattic is a neat company and deserves respect for making
blogging and site creation so accessible. For me, it became less efficient once I &#8220;knew better.&#8221;</p>

<p>So here I am working with Octopress. I get to tap out Markdown without needing a web-based WYSIWYG editor
and type a command to send everything up to the free Github Pages service. This blog is what I&#8217;d call
&#8220;TV Magic.&#8221; Like on cooking shows. All of the same things happen here that would happen on a dynamic
site, just done beforehand so they come out quick. Similar to the ways Emeril Lagasse has his roasts
roasting an hour before the show. Just when they&#8217;re ready, it&#8217;s <em>Bam</em> and we have dinner.</p>

<p>Octopress is wonderful software, and definite props to Brandon Mathis for his work making Jekyll friendly.
Good sir, you&#8217;re the only reason I actually had enough fun putting up a blog to&#8230; Well, put up a blog.</p>

<p><a href="http://octopress.org">Octopress - A blogging framework for hackers</a></p>

<p>At the end of the day, roasting my roasts in advance means low overhead, faster requests, and simple
hosting. I&#8217;m a PHP programmer for sure, and I know there are things PHP and its derivative frameworks
are good at.</p>

<p>Simple blogging just isn&#8217;t putting PHP&#8217;s best foot forward.</p>

<p>&dagger; <em>Yeah, ORACLE.</em></p>

<p><em>Note: Edited for spelling/grammar on March 21, 2013</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preeow, Universe.]]></title>
    <link href="http://blog.zerilliworks.net/blog/2013/03/09/preeow/"/>
    <updated>2013-03-09T02:23:00-05:00</updated>
    <id>http://blog.zerilliworks.net/blog/2013/03/09/preeow</id>
    <content type="html"><![CDATA[<p>I&#8217;ve heard that one of the big things that separates mediocre programmers from
good ones is blog writing. Participation in the open source scene is huge as well,
but getting people to listen to you is eye-opening and empowering. At least, I feel
that it is. Sharing of information is what makes the Web remarkable. If I have
things to contribute, I think I should get them out there.</p>

<!--more-->


<h2>Allow Me to Introduce Myself.</h2>

<p><em>My name is Armand.</em> I&#8217;m a quirky round-faced ball of enthusiasm and big time
programming enthusiast. I&#8217;ve been writing code for the better part of my life, in
some form or another. I decided to make Web programming my specialty after I taught
myself PHP and witnessed the power I immediately channeled with just a text editor.</p>

<p>All I&#8217;ve ever really wanted to do is help people, and creating systems for the Web
fascinates me. I may have the opportunity to share what I have to offer with a lot
of people. It&#8217;s a much larger scale than fixing computers, which I always thought
was a pain in the ass.</p>

<p>My old boss told the old joke,</p>

<blockquote><p>How many programmers does it take to screw in a lightbulb? None, that&#8217;s a hardware problem!</p></blockquote>

<p>Oh, how we laughed.</p>

<p>So in the same ways I&#8217;ve taken on a DIY attitude, I&#8217;ve taught myself everything I
know about these electric beasts. They are deeply fascinating to me. I&#8217;ve seen more
than a handful of bright-eyed young programmers showcase what I call hollow talent.
It&#8217;s similar to how you might bulls&#8211;t someone you&#8217;re talking to such that you
appear to be informed about the topic at hand. Sadly, a lot of this fresh talent is
built on looking up into higher constructs while not understanding the activity
that drives them.</p>

<p>My first programming experience came while learning about robotics in a summer-camp
sort of program. I was just about twelve, and we had a lot to play with. They had
those nifty Lego robitcs sets, sure. But the real pleasure was working with a real
machine; the <em>Parallax BASIC Stamp</em> was the first real computer I&#8217;ve ever bossed
around.</p>

<p>On a microcontroller, you don&#8217;t get any help. There are functions and implementations
that keep your hardware afloat, and that&#8217;s it. No standard
libraries. All you have is math and memory access, essentially. That was my boot
camp.</p>

<p>I learned to have fun with the BASIC Stamp, simple as they were. Most of it was
the fact that transferring a program to the little EEPROM on these robots would
immediately bring them to life. I&#8217;d get to tweak and test continually, and it was
endlessly entertaining. This is probably where I established by preferred development
paradigm: Test-driven development.</p>

<p>I taught myself about the implementation of many simple algorithms, since there was
no hand-holding in PBASIC (Parallax&#8217;s extension of BASIC adding microcontroller-specific
constructs). Step by step, I built up core computer science knowledge, almost
without knowing it. All that really mattered was that I was getting to do new things
with what I learned. Learning enabled a unique kind of excitement for me, and I
never lost the desire to learn. The self-teaching process, though frustrating at
times, is still the activity I find most rewarding.</p>

<p>I kept it rolling, picking up C++ while I worked with openFrameworks (which was unbelievably
fun) and later PHP, where I got my foundation in web programming. HTML, CSS, JavaScript&#8230;
They all came along with it. And now I&#8217;m further pushing my boundaries in the web with
languages like Ruby and Erlang. I was never much a fan of Python, but to be fair I never
gave it a thorough try.</p>

<p>And these all just barely scratch the surface. I have so much more to illuminate.</p>

<p>I tend not to think in absolutes. There are some issues that polarize me, but I&#8217;ve
always been a rather open-minded individual. I contrast this to a majority of tech
bloggers whom are opinionated, stubborn, and elitist. I&#8217;ll admit that these are
sometimes positions that are easy to settle into, which is perhaps why people become
such binary thinkers with little awareness to the fact.</p>

<p>There is so much to experience in the world of technology, that I&#8217;ve found it far
more enjoyable to explore and absorb new ideas. Odd as this may sound, I try to never
think that I&#8217;m doing something right. It doesn&#8217;t mean I think I&#8217;m wrong. It means I
don&#8217;t hold my methods as perfect or authorotative. There&#8217;s often a better way to do
things. Even if I&#8217;m solving a problem to the best of my ability or in the best
possible way, I like to remain aware of and receptive to concepts carried in on the
intermittent gusts of fresh air.</p>

<p>All of this experience and philosophy culminates in my overarching life goal: To be helpful.
A lot of people have a lot of problems, and somehow I plan on solving at least one of them.</p>

<p>This is me. And I can be very helpful.</p>
]]></content>
  </entry>
  
</feed>
