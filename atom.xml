<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zerillian Engineering]]></title>
  <link href="http://blog.zerilliworks.net/atom.xml" rel="self"/>
  <link href="http://blog.zerilliworks.net/"/>
  <updated>2013-03-17T01:29:56-04:00</updated>
  <id>http://blog.zerilliworks.net/</id>
  <author>
    <name><![CDATA[Armand Zerilli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why Octopress?]]></title>
    <link href="http://blog.zerilliworks.net/blog/2013/03/16/why-octopress/"/>
    <updated>2013-03-16T14:40:00-04:00</updated>
    <id>http://blog.zerilliworks.net/blog/2013/03/16/why-octopress</id>
    <content type="html"><![CDATA[<p>I could have just tossed a WordPress installation up somewhere. It probably would have taken less time
to set up. But I&#8217;m not a big fan of WordPress. I&#8217;m not a big fan of anything that needs extra plugins to
be reasonably secure. I like fast and simple. AND NOW HERE I AM.</p>

<!-- more -->


<p>Any seasoned (or even soft-boiled) developer realizes the potential of the terminal. I&#8217;m not an average
web user. I shouldn&#8217;t have to learn the lingo of the CMS du-jour. if I want to build a good site or blog. I
should be able to use basically three skills: Git, Markdown, and the terminal. No dicking through page
after page of backend material. I already know these things, and they have proven themselves as my most
enjoyable tools to use.</p>

<p>I also wanted this blog to be fast. Software like WordPress, Movable Type, MojoMotor, Drupal&#8230; They&#8217;re
burdened with significant overhead of processing and delivering pages. Some have plugins to help, but
I think that we shouldn&#8217;t even need them. Why would you ship a slow product and have third parties make
it safe and efficient? Seems like skipping a step.&dagger;</p>

<p>I don&#8217;t want to pick on WordPress too much. Automattic is a neat company and deserves respect for making
blogging and site creation so accessible. For me, it became less efficient once I &#8220;knew better.&#8221;</p>

<p>So here I am working with Octopress. I get tap out Markdown without needing a web-based WYSIWYG editor
and type a command to send everything up to the free Github Pages service. This blog is what I&#8217;d call
&#8220;TV Magic.&#8221; Like on cooking shows. All of the same things happen here that would happen on a dynamic
site, just done beforehand so they come out quick. Similar to the ways Emeril Lagasse has his roasts
roasting an hour before the show. Just when they&#8217;re ready, it&#8217;s <em>Bam</em> and we have dinner.</p>

<p>Octopress is wonderful software, and definite props to Brandon Mathis for his work making Jekyll friendly.
Good sir, you&#8217;re the only reason I actually had enough fun putting up a blog to&#8230; Well, put up a blog.</p>

<p><a href="http://octopress.org">Octopress - A blogging framework for hackers</a></p>

<p>At the end of the day, roasting my roasts in advance means low overhead, faster requests, and simple
hosting. I&#8217;m a PHP programmer for sure, and I know there are things PHP and its derivative frameworks
are good at.</p>

<p>Simple blogging just isn&#8217;t putting the best foot forward.</p>

<h4>&dagger; <em>Yeah, ORACLE.</em></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preeow, Universe.]]></title>
    <link href="http://blog.zerilliworks.net/blog/2013/03/09/preeow/"/>
    <updated>2013-03-09T02:23:00-05:00</updated>
    <id>http://blog.zerilliworks.net/blog/2013/03/09/preeow</id>
    <content type="html"><![CDATA[<p>I&#8217;ve heard that one of the big things that separates mediocre programmers from
good ones is blog writing. Participation in the open source scene is huge as well,
but getting people to listen to you is eye-opening and empowering. At least, I feel
that it is. Sharing of information is what makes the Web remarkable. If I have
things to contribute, I think I should get them out there.</p>

<!--more-->


<h2>Allow Me to Introduce Myself.</h2>

<p><em>My name is Armand.</em> I&#8217;m a quirky round-faced ball of enthusiasm and big time
programming enthusiast. I&#8217;ve been writing code for the better part of my life, in
some form or another. I decided to make Web programming my specialty after I taught
myself PHP and witnessed the power I immediately channeled with just a text editor.</p>

<p>All I&#8217;ve ever really wanted to do is help people, and creating systems for the Web
fascinates me. I may have the opportunity to share what I have to offer with a lot
of people. It&#8217;s a much larger scale than fixing computers, which I always thought
was a pain in the ass.</p>

<p>My old boss told the old joke,</p>

<blockquote><p>How many programmers does it take to screw in a lightbulb? None, that&#8217;s a hardware problem!</p></blockquote>

<p>Oh, how we laughed.</p>

<p>So in the same ways I&#8217;ve taken on a DIY attitude, I&#8217;ve taught myself everything I
know about these electric beasts. They are deeply fascinating to me. I&#8217;ve seen more
than a handful of bright-eyed young programmers showcase what I call hollow talent.
It&#8217;s similar to how you might bulls&#8211;t someone you&#8217;re talking to such that you
appear to be informed about the topic at hand. Sadly, a lot of this fresh talent is
built on looking up into higher constructs while not understanding the activity
that drives them.</p>

<p>My first programming experience came while learning about robotics in a summer-camp
sort of program. I was just about twelve, and we had a lot to play with. They had
those nifty Lego robitcs sets, sure. But the real pleasure was working with a real
machine; the <em>Parallax BASIC Stamp</em> was the first real computer I&#8217;ve ever bossed
around.</p>

<p>On a microcontroller, you don&#8217;t get any help. There are functions and implementations
that keep your hardware afloat, and that&#8217;s it. No standard
libraries. All you have is math and memory access, essentially. That was my boot
camp.</p>

<p>I learned to have fun with the BASIC Stamp, simple as they were. Most of it was
the fact that transferring a program to the little EEPROM on these robots would
immediately bring them to life. I&#8217;d get to tweak and test continually, and it was
endlessly entertaining. This is probably where I established by preferred development
paradigm: Test-driven development.</p>

<p>I taught myself about the implementation of many simple algorithms, since there was
no hand-holding in PBASIC (Parallax&#8217;s extension of BASIC adding microcontroller-specific
constructs). Step by step, I built up core computer science knowledge, almost
without knowing it. All that really mattered was that I was getting to do new things
with what I learned. Learning enabled a unique kind of excitement for me, and I
never lost the desire to learn. The self-teaching process, though frustrating at
times, is still the activity I find most rewarding.</p>

<p>I kept it rolling, picking up C++ while I worked with openFrameworks (which was unbelievably
fun) and later PHP, where I got my foundation in web programming. HTML, CSS, JavaScript&#8230;
They all came along with it. And now I&#8217;m further pushing my boundaries in the web with
languages like Ruby and Erlang. I was never much a fan of Python, but to be fair I never
gave it a thorough try.</p>

<p>And these all just barely scratch the surface. I have so much more to illuminate.</p>

<p>I tend not to think in absolutes. There are some issues that polarize me, but I&#8217;ve
always been a rather open-minded individual. I contrast this to a majority of tech
bloggers whom are opinionated, stubborn, and elitist. I&#8217;ll admit that these are
sometimes positions that are easy to settle into, which is perhaps why people become
such binary thinkers with little awareness to the fact.</p>

<p>There is so much to experience in the world of technology, that I&#8217;ve found it far
more enjoyable to explore and absorb new ideas. Odd as this may sound, I try to never
think that I&#8217;m doing something right. It doesn&#8217;t mean I think I&#8217;m wrong. It means I
don&#8217;t hold my methods as perfect or authorotative. There&#8217;s often a better way to do
things. Even if I&#8217;m solving a problem to the best of my ability or in the best
possible way, I like to remain aware of and receptive to concepts carried in on the
intermittent gusts of fresh air.</p>

<p>All of this experience and philosophy culminates in my overarching life goal: To be helpful.
A lot of people have a lot of problems, and somehow I plan on solving at least one of them.</p>

<p>This is me. And I can be very helpful.</p>
]]></content>
  </entry>
  
</feed>
