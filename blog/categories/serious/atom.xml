<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Serious | Zerillian Engineering]]></title>
  <link href="http://blog.zerilliworks.net/blog/categories/serious/atom.xml" rel="self"/>
  <link href="http://blog.zerilliworks.net/"/>
  <updated>2013-09-12T23:59:47-04:00</updated>
  <id>http://blog.zerilliworks.net/</id>
  <author>
    <name><![CDATA[Armand Zerilli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Blade Extensions in Laravel 4]]></title>
    <link href="http://blog.zerilliworks.net/blog/2013/07/10/blade-extensions-in-laravel-4/"/>
    <updated>2013-07-10T00:05:00-04:00</updated>
    <id>http://blog.zerilliworks.net/blog/2013/07/10/blade-extensions-in-laravel-4</id>
    <content type="html"><![CDATA[<p>Laravel 4 is here, and it's a thing of beauty. Among all the remarkable new features remains the ability to extend the Blade template system with your own statements and functionality. I previously wrote about how to do it in Laravel 3, and thankfully it is equally straightforward in Laravel 4. There's even a bit more explanation this time around. So here it is, Blade Extensions for every artisan's favorite framework.</p>

<!-- more -->


<p>Blade has a nice 'n easy syntax for template creation that works by substituting PHP for the Blade statements when a view is rendered. Making a Blade extension means defining a closure function that does this substitution and telling Laravel to run it on the stack of Blade compilers already in place.</p>

<p>This is done like so:</p>

<pre><code>Blade::extend(function($view) {
    // Statement code...
});
</code></pre>

<p>Just like Laravel 3. After calling <code>Blade::extend()</code>, the closure you define will automatically be run for every view. The <code>$view</code> variable contains the plain text contents of the view to be rendered. The rendering takes place on this raw data, passing the view out to the PHP parser after all the Blade statements have been evaluated.</p>

<p>You can plop Blade extensions in your routes.php or filters.php file or place them in a separate file to be included via the auto-loader or another mechanism you choose. They just have to be <em>somewhere,</em> since Laravel uses its autoloader and IoC to resolve the Blade class anywhere.</p>

<p><a href="http://laravel.com/api/class-Illuminate.View.Compilers.BladeCompiler.html">Take a peek at the class</a> and study it a little. You'll notice some patterns, which you'll be replicating in your Blade extensions. If you take time to observe how they work and read up on regular expressions, I won't have to explain them to you.</p>

<p>Almost all of my view layouts have a <code>@yield('title')</code> statement in the document head. The title of the page is set by the view that extends the layout. Normally, that would look like this:</p>

<pre><code>@section('title')
Page Title
@stop
</code></pre>

<p>It would be nicer this way, I think:</p>

<pre><code>@title('Page Title')
</code></pre>

<p>The extension looks a little intimidating, but it really isn't. It's just a wrapper for a standard find-and-replace function (<code>preg_replace()</code>) that swaps the custom Blade tag with some raw PHP.</p>

<p>Update: <a href="http://localhost:4000/blog/2013/07/10/blade-extensions-in-laravel-4/#comment-1013474993">It's been pointed out to me</a> that there's an existing function to create matchers for PHP swaps like this. Look at the <a href="http://laravel.com/api/class-Illuminate.View.Compilers.BladeCompiler.html#_createMatcher">createMatcher docs.</a></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">Blade::extend(function($view) {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;$pattern = &#39;/@title\(\s?[\&#39;\&quot;](.*)[\&#39;\&quot;]\s?\)/&#39;;</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  $replacement = &quot;&amp;lt;?php $&lt;strong&gt;env-&gt;startSection(&#39;title&#39;);?&gt;$1&amp;lt;?php $&lt;/strong&gt;env-&gt;stopSection();?&gt;&quot;;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;return preg_replace($pattern, $replacement, $view);</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;});&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Laravel has a variable to refer to its environment/execution context. That's <code>$__env</code>. The methods <code>startSection()</code> and <code>stopSection()</code> do pretty much what you'd expect. So when making a Blade template that extends a layout, such as this:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>title.blade.php  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">@extends(&#39;master&#39;)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;@section(&#39;title&#39;)</span>
</span><span class='line'><span class="x">Good Site, Home of the Good Site.</span>
</span><span class='line'><span class="x">@stop</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You end up with a cached view that looks like this:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>title.blade.php (Rendered)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php $__env-&gt;startSection(&#39;title&#39;); ?&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;Good Site, Home of the Good Site.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;&amp;lt;?php $__env-&gt;stopSection(); ?&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;&amp;lt;?php echo $&lt;strong&gt;env-&gt;make(&#39;main&#39;, array_except(get_defined_vars(), array(&#39;&lt;/strong&gt;data&#39;, &#39;__path&#39;)))-&gt;render(); ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Using the extension defined previously, this same output is produced. Don't fret over the last line. You can probably guess what it does. Just remember that <code>$__env-&gt;startSection()</code> and <code>$__env-&gt;stopSection()</code> are what stake out a certain chunk of content. If you sniff around in the <a href="http://laravel.com/api/source-class-Illuminate.View.Compilers.BladeCompiler.html">BladeCompiler API</a>, you can find the PHP that backs up the stock Blade statements.</p>

<p>This is just the beginning. If you want to see a markup extension, take a look at <a href="/blog/2013/04/03/blade-extensions-in-laravel/#markup-extensions">my last article</a>. Add in functional PHP to your custom Blade tags if you want. As long as you can regex-match and substitute it, the sky's the limit. Be mindful of the number of extensions you add, since every view rendered has to be passed through them all at least once. The overhead isn't intrinsically huge, but be careful anyway. And be thankful that Laravel does you a favor caching things.</p>

<p><em>Full disclosure: I've yet to fully plunge the depths of Laravel 4, so this article may contain small inaccuracies. I've tested the code semi-scientifically and it works as expected. If it turns out I'm full of shit, leave a note or send a message to armand(at)zerilliworks(dot)net.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All Work and No Play Makes Jack Become an Architect and Build a Bridge to Jump From]]></title>
    <link href="http://blog.zerilliworks.net/blog/2013/04/26/all-work-and-no-play-makes-jack-become-an-architect-and-build-a-bridge-to-jump-from/"/>
    <updated>2013-04-26T20:44:00-04:00</updated>
    <id>http://blog.zerilliworks.net/blog/2013/04/26/all-work-and-no-play-makes-jack-become-an-architect-and-build-a-bridge-to-jump-from</id>
    <content type="html"><![CDATA[<p>Working in my past job at a film distribution startup was at times a nightmare. I was the only programmer doing the work of four, which I hear is not uncommon among the tech startup scene. Most of it can be summed up in saying it was too much work for too little reward, and it damn near killed me.</p>

<!-- more -->


<p>I was the only one I had to answer to in implementing a feature, and I did it quickly. I dodged left and right to meet the expectations of my partners, building out a feature and abandoning it as a nonessential or too convoluted. It could be fun, since I got to experiment with a lot of things. I did code monkey work in the past, so a promotion to an architect-like position felt empowering. OH HOW NAÏVE I WAS.</p>

<p>Ultimately, I worked all the time without seeing regular gains in functionality and overall enjoyment using the app. I had burned through development with workaholic kerosene and I built the shoddy, ill-conceived bridge from which I would make my Javert-esque plunge into the dark, churning waters below.</p>

<p>This lesson is simple. If you’re feeling stymied, it’s probably because you’ve worked too hard for too little. Essentially, <em>it's your own absent-minded blundering fault.</em> <strong>BUT DON'T FEEL SHITTY ABOUT IT.</strong> Chances are, you were doing what felt right at the time. Sometimes throwing more hours at a problem sounds like the proper solution but is absolutely the wrong thing to do. Sometimes you’ve wandered so far from your ideals that working smarter and not harder still isn’t enough to fix your bridge. It becomes more and more difficult if you're attached to your ideas and stubborn in protecting them. These are great traits to have, but they can sadly become misdirected. The deluded image of a workplace hero is one who is willing to sacrifice himself for the project.</p>

<p>The thing is, though, that you are part of what makes the project alive. Destroying your health will cause far more harm than good. I should know. I wasn't kidding when I said it damn near killed me. I've got juvenile-onset diabetes, and the stress led to remiss intermittent care.</p>

<p>This is mostly why I’m teaching myself about Ruby on Rails. It’s instant gratification. They’re serious when they say Rails can do in days what takes others weeks. The work you put into it is satisfying. You’re the architect of your app. You shouldn’t be mixing the concrete and bending rebar. Use your tools to empower your ideas whenever possible. Working with PHP was unbearable more often than not. I was laying bricks when I should have been sketching out the new wing of the museum.</p>

<p>My misdirected brute-forcing of problems blindly pushed the project forward. I was just building a bridge so we could cross the river. This was all the faith I had in the project, just that it could be done. When that illusion shattered... It was nothing short of odious.  Now, I see myself as part of my projects, and them as a part of me. My health reflects theirs and vice-versa. I think you too will find your projects say as much about you as you do about them.</p>

<p>I didn’t always plan on flinging myself off the unfinished end of my bridge, but that outcome was, in retrospect, inevitable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connect Yourself to the World]]></title>
    <link href="http://blog.zerilliworks.net/blog/2013/04/21/connect-yourself-to-the-world/"/>
    <updated>2013-04-21T00:04:00-04:00</updated>
    <id>http://blog.zerilliworks.net/blog/2013/04/21/connect-yourself-to-the-world</id>
    <content type="html"><![CDATA[<p>A few days ago, I was lucky enough to attend a gathering of some local web developers and software artisans. I've <a href="/blog/2013/03/28/im-here-for-the-evolution/">previously documented</a> my loneliness and the degree to which it afflicted me, so this was a welcome event. Just a few hours with intelligent like-minded people really kicked my ass. It was a time when I could tell I was the dullest tool in the shed, but that was fine. It's not that I wasn't sharp. It's that I was in a shed with lawnmowers made of lightsaber.</p>

<!-- more -->


<p></p>

<blockquote class="twitter-tweet"><p>Really excellent day today. Learned about creeping on people with data and the disgusting guts of browsers from some really clever gents.</p>&mdash; Armand Zerilli (@zerilliworks) <a href="https://twitter.com/zerilliworks/status/324337394360930304">April 17, 2013</a></blockquote>


<script async src="http://blog.zerilliworks.net//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p></p>

<p>I was a bit nervous going into it, as I often am with these kinds of events, but I got over that surprisingly quickly just by shaking hands and telling people my name. I can't emphasize enough how easily that calmed me. I remember standing outside on the street looking at the door and wondering if I'd even be able to keep up with what happened in there. The fear was completely unfounded, and mostly dissolved by shaking hands and exchanging names.</p>

<p>I got some water, took a seat, and felt immediately that I was the youngest person there by at least five years. Mostly just an observation. I wasn't bothered by being new, and it didn't seem anyone else was either. I had been worried I would be bothered, but... There I was, acquainting myself with the enthusiastic faces of the Ithaca web people.</p>

<p>Presentations were given, jokes were exchanged, and cats were turned into bacon. Marvelous. I got to really feel what proficient and well-adjusted programmers do, and a little about how they think. I fear that I asked some silly-sounding questions, but they were regardless met with thoughtful consideration and straight answers.</p>

<p>In my startup experience, meetups were often in the mixed company of business-types and technology-types, and everybody was putting on a show. In those <em>"little businesses that could,"</em> every second of every conversation was a pitch in some way or another. I was glad to see no trace of that here.</p>

<p>Before I left, I waited outside with one of the attendees with whom I had an informative exchange regarding my recent efforts and employment opportunities I didn't even know existed. Seriously, there are more than a handful of web companies in Ithaca. My eyebrows peaked for sure, in a good way. The way that says, "By Jove! Not so forlorn is my situation after all!"</p>

<p>I left feeling refreshed and somewhat humbled. I picked up more in that couple of hours than I probably had taught myself in the last month. Having people who can speak concisely and from experience is an invaluable learning tool.</p>

<p>So if you're a bit of a hermit, please do what I did. Don't think too big, don't worry about acting silly, and don't worry about judgement. Connecting yourself to the world isn't that difficult, and it's certainly not the kind of competitive overanalyzing that many social cynics say it is. Just do what I did.</p>

<p>Shake hands, say your name, and listen.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm Here for the Evolution]]></title>
    <link href="http://blog.zerilliworks.net/blog/2013/03/28/im-here-for-the-evolution/"/>
    <updated>2013-03-28T04:47:00-04:00</updated>
    <id>http://blog.zerilliworks.net/blog/2013/03/28/im-here-for-the-evolution</id>
    <content type="html"><![CDATA[<p>I never really addressed this, so I'll do it now. I've been programming as an amateur for a long time. I'm almost 20, and it's really grown into my primary focus over the last few years. I'd like to share what led up to the starting of this blog. It's only a part of a big change for me.</p>

<!-- more -->


<h2>It started with a startup.</h2>

<p>Early last year, I began working for a startup company here in Ithaca. A bright and clever young team with a great idea and unstoppable motivation. We were little guys trying to launch a new film distribution company. For other little guys, too: Independent filmmakers.</p>

<p>It was a business forged from passion. We were all film buffs and attended film school, which means we had all seen some gems get passed over and lost in even niche film interest groups. Seriously, high-caliber films made by incredibly smart people. We couldn't believe they weren't more popular. We watched every film we acquired, and movie night came right after every meeting.</p>

<p><span class='pullquote-right' data-pullquote='It was absolutely thrilling.'>
I was their only software developer. We were just getting started, and funding was still iffy, but we worked tirelessly. I was given complete control over the technology, and I had never had such a big responsibility. It was absolutely thrilling. If I wanted to ship a new feature, I didn't ask anybody. As long as I kept my priorities straight, I could implement whatever I wanted. They trusted me with their website, and I took good care of it.
</span></p>

<p>We continued acquiring films and building features and spreading the word. We actually landed some award-winning short films in the beginning, personally vetted by each of us. We went to Tribeca and interviewed with startup incubators. This was a startup in every sense of the word, and that was totally new to me. It was beyond exciting.</p>

<p><span class='pullquote-right' data-pullquote='I still get poignant flashbacks when I say that things turned sour.'>
I still get poignant flashbacks when I say that things turned sour. I was literally losing my mind from the stress and we began to shed some connections from circumstances beyond our control. I snapped after a heated exchange with my partners wherein I learned we severely differed on some core principles, which I felt morally opposed to. Things started to get fishy, and I had to leave. Not only was my health degrading, but I discovered a shocking truth that day. These were good people, but the chemistry turned out to be completely wrong. After parting ways, everything fell apart. The company made a failed attempt at crowd-sourced funding and garnered only lukewarm reception in a film festival partnership. Sometimes I felt like I let a lot of people down. I felt like the biggest failure imaginable. I had never been more lost or embarrassed.
</span></p>

<p>All things considered, it was actually a burnout waiting to happen. I couldn't have kept that work up. No one could for long. We weren't doing it quite right. It felt like a part of me died when the company crumbled, and it still bothers me to this day.</p>

<p>I lapsed into seclusion. I kept programming, but I did it behind closed doors. I continued to teach myself as I typically did, but there was always something nagging me with every method I wrote. Something that told me I should be ashamed of what I was doing, that somehow it wasn't good enough. It was so bad some days that I would start up my IDE and stare at the new project wizard for a minute before quitting it and watching television. I was afraid to even start something.</p>

<p>The failure of that startup really got to me. I may not have invested much more than time, but it hurt a lot. I didn't consult with anybody. And sometimes I lied about it. That nagging voice telling me I wasn't perfect degraded the quality of my work. I let things slide because I was always doubting myself. I tried again and again to produce marketable ideas, but just couldn't make them work. I felt dead-ended. I have struggled with depression before, and it made a strong resurgence during this period. I had never felt lower.</p>

<p><span class='pullquote-right' data-pullquote='As it turns out, every problem I faced could somehow or another be traced back to my isolated nature.'>
Around Christmas last year, things finally started to change. I produced a solid idea, one that I found useful and relevant, something I was compelled to work on. I kept hitting some roadblocks, which prompted me to do a little thinking about what was sticking its thorns in me. As it turns out, every problem I faced could somehow or another be traced back to my isolated nature.
</span></p>

<p>I had been social, of course, but my work was secret. I was afraid of sharing anything. I realized that had to change.</p>

<p>I perused forums, I signed up for mailing lists and message boards. I signed up for Github and put up a repository of my own. Even though that repository was pretty worthless, it was a symbolic step for me. <a href="/projects/shadowcv">That project was one of my first</a>, and now there is nothing to hide about it. I hadn't been very open before, so I'm taking more steps now. I've also netted myself an account with a hip new programmer's network called <a href="http://koding.com">Koding.</a> I'm asking questions and seeking advice. I really want to be the best programmer I can, and I know that's impossible if I stay in my bubble. No matter how good I get at Trivial Pursuit while I'm here.</p>

<p>This blog may be unremarkable on the scale of the Internet, but it is <em>huge</em> for me. Maybe my ideas really are unique and interesting. Maybe I'll make a connection to someone that kicks my ass and changes the way I think forever. And what if by letting go of my comforting solitude I flourish enough to create the systems I dream about? I would be crazy to ignore these possibilities.</p>

<p>The people that know me personally might find me socially capable and outgoing. In many cases that's true. But professionally and with my work, I never talked to anyone seriously. I had chats about what I do, but I couldn't connect. I am hoping that changes.</p>

<p><span class='pullquote-right' data-pullquote='I don&#8217;t want to cover up my weaknesses anymore.'>
So here I am. I've accepted my past shortcomings and I'm playing to my strengths. I don't want to cover up my weaknesses anymore. I want to bring them into the light and be realistic about them. If I can fill in these weaknesses, I will. Even if I can't, I'll gain insight into the ways I can best support my work and the work of those I collaborate with.
</span></p>

<p>As I say often, all I've ever wanted to do is help people, and that means accepting help when I need it.</p>

<p>I am beyond grateful for any advice I get through the things I write and I can't be appreciative enough of the time anyone spends helping me. I realize now that we're all in this together, and being a vigilante was crippling me. I need to embrace the world, and I've been truly inspired by a lot of really smart programmers and genuine technologists who are all looking to improve the world around them. I've probably sent you emails at some point or another, you know who you are. Thank you. Truly.</p>

<p>That's why I do this. I want to learn. I do this for me right now, but I hope that it may help others and eventually become a channel through which I can return the favors I've been granted.</p>

<h2>Hello, world. I'm Armand. And I'm here to evolve.</h2>
]]></content>
  </entry>
  
</feed>
